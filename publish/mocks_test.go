// Code generated by MockGen. DO NOT EDIT.
// Source: publish.go

// Package publish_test is a generated GoMock package.
package publish_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRunner is a mock of Runner interface
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockRunner) Run(bin, dir string, quiet bool, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{bin, dir, quiet}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockRunnerMockRecorder) Run(bin, dir, quiet interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{bin, dir, quiet}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRunner)(nil).Run), varargs...)
}

// MockMetadataInterface is a mock of MetadataInterface interface
type MockMetadataInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataInterfaceMockRecorder
}

// MockMetadataInterfaceMockRecorder is the mock recorder for MockMetadataInterface
type MockMetadataInterfaceMockRecorder struct {
	mock *MockMetadataInterface
}

// NewMockMetadataInterface creates a new mock instance
func NewMockMetadataInterface(ctrl *gomock.Controller) *MockMetadataInterface {
	mock := &MockMetadataInterface{ctrl: ctrl}
	mock.recorder = &MockMetadataInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataInterface) EXPECT() *MockMetadataInterfaceMockRecorder {
	return m.recorder
}

// Identity mocks base method
func (m *MockMetadataInterface) Identity() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identity")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Identity indicates an expected call of Identity
func (mr *MockMetadataInterfaceMockRecorder) Identity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identity", reflect.TypeOf((*MockMetadataInterface)(nil).Identity))
}
